# @section license
# 
# Copyright (c) 2006-2012 David Osborn
#
# Permission is granted to use and redistribute this software in source and
# binary form, with or without modification, subject to the following
# conditions:
#
# 1. Redistributions in source form must retain the above copyright notice, this
#    list of conditions, and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions, and the following disclaimer in the documentation
#    and/or other materials provided with the distribution, and in the same
#    place and form as other copyright, license, and disclaimer information.
#
# As a special exception, distributions of derivative works in binary form may
# include an acknowledgement in place of the above copyright notice, this list
# of conditions, and the following disclaimer in the documentation and/or other
# materials provided with the distribution, and in the same place and form as
# other acknowledgements, similar in substance to the following:
#
#    Portions of this software are based on the work of David Osborn.
#
# This software is provided "as is", without any express or implied warranty. In
# no event will the authors be liable for any damages arising out of the use of
# this software.
#
# @file
#
# Generated by @GENERATOR@

.PHONY: all
all: exec

################################################################################

SHELL := /bin/bash

topdir := @topdir@
ifneq ($(topdir),.)
top_prefix := $(topdir)/
else
top_prefix :=
endif

prefix         := @prefix@
exec_prefix    := @exec_prefix@
bindir         := @bindir@
sbindir        := @sbindir@
libexecdir     := @libexecdir@
datarootdir    := @datarootdir@
datadir        := @datadir@
sysconfdir     := @sysconfdir@
sharedstatedir := @sharedstatedir@
localstatedir  := @localstatedir@
docdir         := @docdir@
infodir        := @infodir@
htmldir        := @htmldir@
dvidir         := @dvidir@
pdfdir         := @pdfdir@
psdir          := @psdir@
libdir         := @libdir@
mandir         := @mandir@

CXX            := @CXX@
CPPFLAGS       := @CPPFLAGS@
CXXFLAGS       := @CXXFLAGS@
LDFLAGS        := @LDFLAGS@

OBJEXT         := @OBJEXT@
EXEEXT         := @EXEEXT@

PACKAGE        := @PACKAGE@
VERSION        := @VERSION@
VER_MAJOR      := @VER_MAJOR@
VER_MINOR      := @VER_MINOR@
VER_PATCH      := @VER_PATCH@

BUILD          := @BUILD@
BUILD_CPU      := @BUILD_CPU@
BUILD_OS       := @BUILD_OS@

HOST           := @HOST@
HOST_CPU       := @HOST_CPU@
HOST_OS        := @HOST_OS@

SOURCES := @SOURCES@
OBJS    := $(SOURCES:%=src/%$(OBJEXT))
LIBS    := @LIBS@

ifeq ($(HOST_OS),win32)
OBJS += $(PACKAGE).res
endif

################################################################################
# special tokens
#
# See <http://blog.jgc.org/2007/06/escaping-comma-and-space-in-gnu-make.html>.

space :=
space +=

comma := ,

################################################################################
# options
#
# You can set these options when running make to change the behaviour of the
# build system.  For example, to create a minimal source distribution:
#
#    make dist DIST_MIN=1

# HACK: disable rules when not needed
ifneq ($(findstring dist,$(MAKECMDGOALS)),)

DIST_MIN        := 0# exclude everything that can be excluded from distributions
DIST_NO_RES     := 0# exclude the res directory from distributions
DIST_NO_RES_BIN := 0# exclude the res/bin directory from distributions
DIST_NO_RES_SRC := 0# exclude the res/src directory from distributions
DIST_NO_WEBSITE := 0# exclude the misc/website directory from distributions

ifneq ($(DIST_MIN),0)
DIST_NO_RES     := 1
DIST_NO_RES_BIN := 1
DIST_NO_RES_SRC := 1
DIST_NO_WEBSITE := 1
else
ifneq ($(DIST_NO_RES),0)
DIST_NO_RES_BIN := 1
DIST_NO_RES_SRC := 1
else
ifeq ($(DIST_NO_RES_BIN),$(DIST_NO_RES_SRC))
DIST_NO_RES := $(DIST_NO_RES_BIN)
endif
endif
ifeq ($(DIST_NO_RES),$(DIST_NO_WEBSITE))
DIST_MIN := $(DIST_NO_RES)
endif
endif

endif

################################################################################
# functions

FIND_IN  = $(shell cd $(1) && find $(2) $(4) -path '*/.svn' -prune -a -not -name '.svn' -o $(3))
FIND     = $(call FIND_IN,.,$(1),$(2),$(3))
FIND_TOP = $(call FIND_IN,$(topdir),$(1),$(2),$(3))

################################################################################
# construct the build system

Makefile: $(top_prefix)misc/build/Makefile.in config.status
	./config.status Makefile

config.h: $(top_prefix)misc/build/config.h.in config.status
	./config.status config.h

doc/doxygen.cfg: $(top_prefix)doc/doxygen.cfg.in config.status
	./config.status doc/doxygen.cfg

config.status: $(top_prefix)configure
	./config.status --recheck

################################################################################
# build executables

# HACK: disable rules when not needed
ifneq ($(or \
	$(filter all exec,$(MAKECMDGOALS)),\
	$(if $(MAKECMDGOALS),, )),)

.PHONY: exec
exec: $(PACKAGE)$(EXEEXT)

$(PACKAGE)$(EXEEXT): $(OBJS)
	$(CXX) -o $@ $^ $(LDFLAGS) $(LIBS)

# NOTE: -MF is redundant but required for distcc
src/%$(OBJEXT): $(top_prefix)src/%.cpp config.h
	@install -d $(@D)
	$(CXX) -c -MMD -MF src/$*.d -MP -MT src/$*$(OBJEXT) $(CPPFLAGS) $(CXXFLAGS) -o $@ $<

-include $(SOURCES:%=src/%.d)

ifeq ($(HOST_OS),win32)
exec: $(PACKAGE).com
$(PACKAGE).com: src/win32/boot$(OBJEXT)
	$(CXX) -o $@ $^ $(LDFLAGS)
	attrib +H $@

$(PACKAGE).res: $(top_prefix)$(PACKAGE).rc $(top_prefix)misc/win32/$(PACKAGE).exe.manifest $(top_prefix)misc/win32/icon.ico config.h
	windres -Ocoff -I. -DTOPDIR=$(topdir) $< $@
endif

endif

################################################################################
# build and run tests

# HACK: disable rules when not needed
ifneq ($(filter test test/%,$(MAKECMDGOALS)),)

TEST_CPPFLAGS := $(CPPFLAGS)
TEST_CXXFLAGS := $(CXXFLAGS)
TEST_LDFLAGS  := $(LDFLAGS)
TEST_LIBS     := $(LIBS)

ifeq ($(HOST_OS),win32)
TEST_CXXFLAGS := $(TEST_CXXFLAGS) -mconsole
endif

TEST_CASES := $(subst .cpp,,$(call FIND_TOP,test,-type f -name '*.cpp'))

.PHONY: test
test: $(TEST_CASES)

.PHONY: test-run
test-run:

.PHONY: test/%
test/%: test/%$(EXEEXT) test-run
	$<

.PRECIOUS: test/%$(EXEEXT)
test/%$(EXEEXT): test/%$(OBJEXT)
	$(CXX) -o $@ $^ $(TEST_LDFLAGS) $(TEST_LIBS)

test/%$(OBJEXT): $(top_prefix)test/%.cpp config.h
	@install -d $(@D)
	$(CXX) -c -MMD -MF test/$*.d -MP -MT test/$*$(OBJEXT) -imacros config.h $(TEST_CPPFLAGS) $(TEST_CXXFLAGS) -I$(top_prefix)src/extern -iquote $(top_prefix)src -o $@ $<

-include $(TEST_CASES:%=%.d)

endif

################################################################################
# build resources

# HACK: disable rules when not needed
ifneq ($(filter data,$(MAKECMDGOALS)),)

.PHONY: data
data:

endif

################################################################################
# build documentation

# HACK: disable rules when not needed
ifneq ($(filter doc doc-%,$(MAKECMDGOALS)),)

.PHONY: doc
doc: doc-pdf

.PHONY: doc-all
doc-all: doc-doxygen doc-dvi doc-html doc-info doc-pdf doc-ps doc-txt

.PHONY: doc-doxygen
doc-doxygen: doc/doxygen.cfg
	doxygen $<

.PHONY: doc-dvi
doc-dvi: doc/$(PACKAGE).dvi
doc/$(PACKAGE).dvi: $(top_prefix)doc/$(PACKAGE).texi doc/version.texi
#	texi2dvi --clean -I doc -o $@ $<
# FIXME: this is a hack to make it work on my current configuration
	texi2dvi --clean -I doc $<
	mv $(@F) $@

.PHONY: doc-html
doc-html: doc/$(PACKAGE).html
doc/$(PACKAGE).html: $(top_prefix)doc/$(PACKAGE).texi doc/version.texi
	makeinfo --html --no-split -I doc -o $@ $<

.PHONY: doc-info
doc-info: doc/$(PACKAGE).info
doc/$(PACKAGE).info: $(top_prefix)doc/$(PACKAGE).texi doc/version.texi
	makeinfo --no-split -I doc -o $@ $<

.PHONY: doc-pdf
doc-pdf: doc/$(PACKAGE).pdf
doc/$(PACKAGE).pdf: $(top_prefix)doc/$(PACKAGE).texi doc/version.texi
#	texi2dvi --pdf --clean -I doc -o $@ $<
# FIXME: this is a hack to make it work on my current configuration
	texi2dvi --pdf --clean -I doc $<
	mv $(@F) $@

.PHONY: doc-ps
doc-ps: doc/$(PACKAGE).ps
doc/$(PACKAGE).ps: doc/$(PACKAGE).dvi
	dvips -o $@ $<

.PHONY: doc-txt
doc-txt: doc/$(PACKAGE).txt
doc/$(PACKAGE).txt: $(top_prefix)doc/$(PACKAGE).texi doc/version.texi
	makeinfo --no-headers -I doc -o $@ $<

doc/version.texi: Makefile
	@install -d $(@D)
	@echo '@set VERSION $(VERSION)' >$@
	@echo "@set UPDATED `date '+%B %Y'`" >>$@

endif

################################################################################
# install program files

# HACK: disable rules when not needed
ifneq ($(filter install install-%,$(MAKECMDGOALS)),)

.PHONY: install
install: install-data install-exec install-info

.PHONY: install-all
install-all: install-data install-dvi install-exec install-html install-info install-pdf install-ps install-txt

.PHONY: install-data
install-data:

.PHONY: install-dvi
install-dvi: $(dvidir)/$(PACKAGE).dvi
$(dvidir)/%.dvi: doc/%.dvi
	install $< $@

.PHONY: install-exec
install-exec: $(bindir)/$(PACKAGE)$(EXEEXT)
$(bindir)/$(PACKAGE)$(EXEEXT): $(PACKAGE)$(EXEEXT)
	install $< $@

.PHONY: install-html
install-html: $(htmldir)/$(PACKAGE).html
$(htmldir)/%.html: doc/%.html
	install $< $@

.PHONY: install-info
install-info: $(infodir)/$(PACKAGE).info
$(infodir)/%.info: doc/%.info
	install $< $@
	install-info $@

.PHONY: install-pdf
install-pdf: $(pdfdir)/$(PACKAGE).pdf
$(pdfdir)/%.pdf: doc/%.pdf
	install $< $@

.PHONY: install-ps
install-ps: $(psdir)/$(PACKAGE).ps
$(psdir)/%.ps: doc/%.ps
	install $< $@

.PHONY: install-txt
install-txt: $(docdir)/$(PACKAGE).txt
$(docdir)/%.txt: doc/%.txt
	install $< $@

endif

################################################################################
# uninstall program files

# HACK: disable rules when not needed
ifneq ($(filter uninstall,$(MAKECMDGOALS)),)

.PHONY: uninstall
uninstall:

endif

################################################################################
# clean generated files

# HACK: disable rules when not needed
ifneq ($(findstring clean,$(MAKECMDGOALS)),)

CLEAN_FILES_DISTCLEAN   := Makefile config.cache config.h config.log config.status
CLEAN_FILES_CLEAN       := $(PACKAGE)$(EXEEXT) $(addprefix doc/$(PACKAGE),.dvi .info .html .pdf .ps .txt)
CLEAN_FILES_MOSTLYCLEAN := $(SOURCES:%=src/%$(OBJEXT)) doc/version.texi
CLEAN_FILES_DEPCLEAN    := $(SOURCES:%=src/%.d)

ifeq ($(HOST_OS),win32)
CLEANFILES += $(PACKAGE).res
endif

.PHONY: distclean
distclean: clean
	rm -f $(CLEAN_FILES_DISTCLEAN)

.PHONY: clean
clean: mostlyclean depclean
	rm -f $(CLEAN_FILES_CLEAN)

.PHONY: mostlyclean
mostlyclean:
	rm -f $(CLEAN_FILES_MOSTLYCLEAN)

.PHONY: depclean
depclean:
	rm -f $(CLEAN_FILES_DEPCLEAN)

endif

################################################################################
# create source distributions

# HACK: disable rules when not needed
ifneq ($(filter dist dist-%,$(MAKECMDGOALS)),)

DIST_NAME := $(PACKAGE)-$(VERSION)
DIST_FILES := \
	BUGS \
	ChangeLog \
	LICENSE \
	Makefile.in \
	README \
	THANKS \
	config.guess \
	config.h.in \
	config.sub \
	configure \
	$(PACKAGE).exe.manifest \
	$(PACKAGE).ico \
	$(PACKAGE).rc \
	doc/$(PACKAGE).texi \
	doc/doxygen.cfg.in \
	misc/blender/.B.blend \
	misc/fbx/Makefile \
	misc/jedit/modes/catalog \
	misc/wings/Makefile \
	misc/wings/README \
	$(call FIND_TOP,depends,       -type f \( -name '*.patch' -o -name '*.sh' \),-maxdepth 1) \
	$(call FIND_TOP,misc/blender,  -type f -name '*.py') \
	$(call FIND_TOP,misc/cfg,      -type f \( -name '*.conf' -o -name '*.reg' \)) \
	$(call FIND_TOP,misc/fbx,      -type f \( -name '*.[cht]pp' -o -name '*.[chs]' -o -name '*.fbx' \)) \
	$(call FIND_TOP,misc/gcc,      -type f \( -name '*.[cht]pp' -o -name '*.[chs]' -o -name '*.patch' \)) \
	$(call FIND_TOP,misc/gimp,     -type f \( -name '*.gpl' -o -name '*.pat' -o -name '*.py' -o -name '*.vbr' \)) \
	$(call FIND_TOP,misc/jedit,    -type f -name '*.xml') \
	$(call FIND_TOP,misc/maya,     -type f -name '*.mel') \
	$(call FIND_TOP,misc/native,   -type f -name '*.py') \
	$(call FIND_TOP,misc/notepad++,-type f -name '*.py') \
	$(call FIND_TOP,misc/nvidia,   -type f -name '*.ctr') \
	$(call FIND_TOP,misc/patch,    -type f -name '*.cgi') \
	$(call FIND_TOP,misc/util,     -type f -name '*.sh') \
	$(call FIND_TOP,misc/wings,    -type f -name '*.patch') \
	$(call FIND_TOP,src,           -type f \( -name '*.[cht]pp' -o -name '*.[chs]' \))

# apply options
ifneq ($(DIST_MIN),0)
DIST_NAME := $(DIST_NAME)-min
else
ifneq ($(DIST_NO_RES),0)
DIST_NAME := $(DIST_NAME)-nores
else
ifneq ($(DIST_NO_RES_BIN),0)
DIST_NAME := $(DIST_NAME)-noresbin
else
DIST_FILES := $(DIST_FILES) \
	$(call FIND_TOP,res/bin, -type f)
endif
ifneq ($(DIST_NO_RES_SRC),0)
DIST_NAME := $(DIST_NAME)-noressrc
else
DIST_FILES := $(DIST_FILES) \
	$(call FIND_TOP,res/src, -type f -not -name '*~')
endif
endif
ifneq ($(DIST_NO_WEBSITE),0)
DIST_NAME := $(DIST_NAME)-nowebsite
else
DIST_FILES := $(DIST_FILES) \
	$(call FIND_TOP,misc/website, -type f)
endif
endif

DIST_FILES_FROM_DIST_DIR  := $(addprefix $(PACKAGE)-$(VERSION)/,$(DIST_FILES))
DIST_FILES_FROM_BUILD_DIR := $(addprefix dist/,$(DIST_FILES_FROM_DIST_DIR))

# TEST: list files for distribution
#$(foreach file,$(DIST_FILES),$(warning $(file)))
#$(error stop)

.PHONY: dist
dist: dist-xz

.PHONY: dist-all
dist-all: dist-7z dist-bzip2 dist-gzip dist-shar dist-xz dist-zip

.PHONY: dist-7z
dist-7z: dist/$(DIST_NAME).7z
dist/$(DIST_NAME).7z: $(DIST_FILES_FROM_BUILD_DIR)
	@rm -f $@
	cd dist && 7z a -r $(@F) $(DIST_FILES_FROM_DIST_DIR)

.PHONY: dist-bzip2
dist-bzip2: dist/$(DIST_NAME).tar.bz2
dist/$(DIST_NAME).tar.bz2: $(DIST_FILES_FROM_BUILD_DIR)
	tar -jcvf $@ --totals -C dist $(DIST_FILES_FROM_DIST_DIR)

.PHONY: dist-gzip
dist-gzip: dist/$(DIST_NAME).tar.gz
dist/$(DIST_NAME).tar.gz: $(DIST_FILES_FROM_BUILD_DIR)
	tar -zcvf $@ --totals -C dist $(DIST_FILES_FROM_DIST_DIR)

.PHONY: dist-shar
dist-shar: dist/$(DIST_NAME).shar
dist/$(DIST_NAME).shar: $(DIST_FILES_FROM_BUILD_DIR)
	@rm -f $@
	cd dist && shar $(DIST_FILES_FROM_DIST_DIR) >$(@F)

.PHONY: dist-xz
dist-xz: dist/$(DIST_NAME).tar.xz
dist/$(DIST_NAME).tar.xz: $(DIST_FILES_FROM_BUILD_DIR)
	tar -Jcvf $@ --totals -C dist $(DIST_FILES_FROM_DIST_DIR)

.PHONY: dist-zip
dist-zip: dist/$(DIST_NAME).zip
dist/$(DIST_NAME).zip: $(DIST_FILES_FROM_BUILD_DIR)
	@rm -f $@
	cd dist && zip -r $(@F) $(DIST_FILES_FROM_DIST_DIR)

dist/$(PACKAGE)-$(VERSION)/%: $(top_prefix)%
	install -D $< $@

endif

################################################################################
# create binary distributions

# HACK: disable rules when not needed
ifneq ($(filter release,$(MAKECMDGOALS)),)

.PHONY: release
release:

endif

################################################################################
# generate source statistics

# HACK: disable rules when not needed
ifneq ($(filter count,$(MAKECMDGOALS)),)

COUNT_FILES_CXX := $(call FIND,$(top_prefix)src, -type f \( -name '*.[cht]pp' -o -name '*.[ch]' \)) \
	$(top_prefix)config.h.in
COUNT_FILES_PY  := $(call FIND,$(top_prefix)misc,-type f -name '*.py')
COUNT_FILES_SH  := $(call FIND,$(top_prefix)misc,-type f -name '*.sh') \
	$(top_prefix)config.guess \
	$(top_prefix)config.sub \
	$(top_prefix)configure

.PHONY: count
count:
	@echo 'Files:'
	@echo -n '  C++:    '
	@echo $(COUNT_FILES_CXX) | tr ' ' '\n' | wc -l | sed 's/^[[:space:]]*//'
	@echo -n '  Python: '
	@echo $(COUNT_FILES_PY) | tr ' ' '\n' | wc -l | sed 's/^[[:space:]]*//'
	@echo -n '  Shell:  '
	@echo $(COUNT_FILES_SH) | tr ' ' '\n' | wc -l | sed 's/^[[:space:]]*//'

	@echo 'Lines:'
	@echo -n '  C++:    '
	@cat $(COUNT_FILES_CXX) | wc -l | sed 's/^[[:space:]]*//'
	@echo -n '  Python: '
	@cat $(COUNT_FILES_PY) | wc -l | sed 's/^[[:space:]]*//'
	@echo -n '  Shell:  '
	@cat $(COUNT_FILES_SH) | wc -l | sed 's/^[[:space:]]*//'

endif
